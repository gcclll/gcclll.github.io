<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若叶知秋的博客</title>
  
  <subtitle>落叶相依浑似醉，潦倒何妨；悠悠岁月谁高歌，绝胜柳狂。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ii6g.com/"/>
  <updated>2020-05-22T10:53:18.921Z</updated>
  <id>http://blog.ii6g.com/</id>
  
  <author>
    <name>ZhiCheng Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法系列(Algorithm)-leetcode（一）</title>
    <link href="http://blog.ii6g.com/blog/algorithm-leetcode.html"/>
    <id>http://blog.ii6g.com/blog/algorithm-leetcode.html</id>
    <published>2020-05-22T10:22:30.862Z</published>
    <updated>2020-05-22T10:53:18.921Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串操作&quot;&gt;&lt;a href=&quot;#字符串操作&quot; class=&quot;headerlink&quot; title=&quot;字符串操作&quot;&gt;&lt;/a&gt;字符串操作&lt;/h1&gt;&lt;h2 id=&quot;删除字符串中重复的字符&quot;&gt;&lt;a href=&quot;#删除字符串中重复的字符&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://blog.ii6g.com/categories/algorithm/"/>
    
    
      <category term="javascript" scheme="http://blog.ii6g.com/tags/javascript/"/>
    
      <category term="es6" scheme="http://blog.ii6g.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>算法系列(Algorithm)-排序算法（C实现）</title>
    <link href="http://blog.ii6g.com/blog/algorithm-c-sort-algo.html"/>
    <id>http://blog.ii6g.com/blog/algorithm-c-sort-algo.html</id>
    <published>2020-05-22T10:08:05.691Z</published>
    <updated>2020-05-22T10:54:55.643Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h1&gt;&lt;h2 id=&quot;阶乘函数&quot;&gt;&lt;a href=&quot;#阶乘函数&quot; class=&quot;headerlink&quot; title=&quot;阶乘函数&quot;&gt;&lt;/a&gt;阶乘函数&lt;/h
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://blog.ii6g.com/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http://blog.ii6g.com/tags/algorithm/"/>
    
      <category term="javasciprt" scheme="http://blog.ii6g.com/tags/javasciprt/"/>
    
      <category term="c" scheme="http://blog.ii6g.com/tags/c/"/>
    
      <category term="python" scheme="http://blog.ii6g.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Vue next 源码之 reactivity</title>
    <link href="http://blog.ii6g.com/blog/vuejs-next-code-reactive.html"/>
    <id>http://blog.ii6g.com/blog/vuejs-next-code-reactive.html</id>
    <published>2020-05-15T07:47:23.649Z</published>
    <updated>2020-05-26T11:32:53.124Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;code&gt;reactivity&lt;/code&gt; 是 vue next 里面通过 &lt;code&gt;proxy&lt;/code&gt; + &lt;code&gt;reflect&lt;/code&gt; 实现的响应式模块。&lt;/p&gt;
&lt;p&gt;源码路径： &lt;code&gt;packages/reactivity&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;入口文件：&lt;code&gt;packages/reactivity/src/index.ts&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;疑问点解答：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;shallowReactive&lt;/code&gt; 相当于浅复制，只针对对象的一级 reactive，嵌套的对象不会 reactive&lt;/p&gt;
&lt;p&gt;参考：测试代码 reactive.spec.ts&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;string&quot;&gt;&#39;should keep reactive properties reactive&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; props: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt; = shallowReactive(&amp;#123; n: reactive(&amp;#123; foo: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;) &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      props.n = reactive(&amp;#123; foo: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      expect(isReactive(props.n)).toBe(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;阶段代码链接&quot;&gt;&lt;a href=&quot;#阶段代码链接&quot; class=&quot;headerlink&quot; title=&quot;阶段代码链接&quot;&gt;&lt;/a&gt;阶段代码链接&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#code1&quot;&gt;测试用例 &lt;code&gt;reactive.spec.ts&lt;/code&gt; 通过后的代码链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#code2&quot;&gt;测试用例 &lt;code&gt;effect.spec.ts&lt;/code&gt;通过后的代码链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#file-0521&quot;&gt;05-21号 git pull 后的更新合 并之后的 reactive.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gcclll/vue-next-code-read/tree/master/bakups/reactive_files_v&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;将 reactive.js 拆分成 effect.js + baseHandlers.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gcclll/vue-next-code-read/tree/master/bakups/reactive_collection_get_set&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;完成 collection handlers(set + get)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gcclll/vue-next-code-read/tree/master/bakups/reactive_collection_map_set&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;完成 collection Map, Set 支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gcclll/vue-next-code-read/tree/master/bakups/reactive_ref&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;支持 Ref 类型&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;文中重点链接&quot;&gt;&lt;a href=&quot;#文中重点链接&quot; class=&quot;headerlink&quot; title=&quot;文中重点链接&quot;&gt;&lt;/a&gt;文中重点链接&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#test-case-rloops&quot;&gt;vue 中是如何防止在 effect(fn) 的 fn 中防止 ob.prop++ 导致栈溢出的？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#test-case-json&quot;&gt;vue 中为何能对 JSON.parse(JSON.stringify({})) 起作用的？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#question-this&quot;&gt;集合 handlers 的 get 函数实现 this 问题&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#question-raw-key&quot;&gt;Key 和 rawKey 的问题(get 中)，为什么要两次 track:get？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#question-key1-key11&quot;&gt;为什么 key1 和 toReactive(key1) 后的 key11 前后 set 会改变 key1 对应的值？？？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#reactive-nest-ref&quot;&gt;如果 Ref 类型放在一个对象中 reactive 化会有什么结果？？？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;遗留问题&quot;&gt;&lt;a href=&quot;#遗留问题&quot; class=&quot;headerlink&quot; title=&quot;遗留问题&quot;&gt;&lt;/a&gt;遗留问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;DONE&lt;/font&gt;&lt;/strong&gt; &lt;code&gt;ownKeys&lt;/code&gt; 代理收集的依赖不能被触发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=&quot;red&quot;&gt;TODO&lt;/font&gt; &lt;a href=&quot;#question-ref-++&quot;&gt;Ref:a 类型在对象中执行 obj.a++ 之后依旧是 Ref 类型的 a ???&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;h3 id=&quot;2020-05-21-21-19-07-git-pull&quot;&gt;&lt;a href=&quot;#2020-05-21-21-19-07-git-pull&quot; class=&quot;headerlink&quot; title=&quot;2020-05-21 21:19:07 git pull&quot;&gt;&lt;/a&gt;2020-05-21 21:19:07 git pull&lt;/h3&gt;&lt;h1 id=&quot;模块结构&quot;&gt;&lt;a href=&quot;#模块结构&quot; class=&quot;headerlink&quot; title=&quot;模块结构&quot;&gt;&lt;/a&gt;模块结构&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;__tests__/&lt;/code&gt; 测试代码目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/&lt;/code&gt; 主要代码目录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;src&lt;/code&gt; 目录下的文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;baseHandler.ts&lt;/code&gt; 传入给代理的对象，代理 &lt;code&gt;Object/Array&lt;/code&gt; 时使用的 Handlers。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collectionHandlers.ts&lt;/code&gt; 传入给代理的对象，代理 &lt;code&gt;[Week]Set/Map&lt;/code&gt;类型时使用的 Handlers。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;computed.ts&lt;/code&gt; 计算属性代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;effect.ts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operations.ts&lt;/code&gt; 操作类型枚举&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reactive.ts&lt;/code&gt; 主要代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref.ts&lt;/code&gt; &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="vuejs" scheme="http://blog.ii6g.com/categories/vuejs/"/>
    
    
      <category term="javascript" scheme="http://blog.ii6g.com/tags/javascript/"/>
    
      <category term="vuejs" scheme="http://blog.ii6g.com/tags/vuejs/"/>
    
      <category term="vuenext" scheme="http://blog.ii6g.com/tags/vuenext/"/>
    
  </entry>
  
  <entry>
    <title>ES6 新语法</title>
    <link href="http://blog.ii6g.com/blog/js-es6-plus.html"/>
    <id>http://blog.ii6g.com/blog/js-es6-plus.html</id>
    <published>2020-05-09T14:52:39.120Z</published>
    <updated>2020-05-09T17:11:55.420Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考链接：&lt;a href=&quot;https://leanpub.com/understandinges6/read&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leanpub.com/understandinges6/read&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;JavaScript 核心特性在 &lt;a href=&quot;https://tc39.github.io/ecma262/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ECMA-262&lt;/a&gt; 标准中被定义，也叫做 &lt;code&gt;ECMAScript&lt;/code&gt; ，我们所熟知的在浏览器端和 &lt;code&gt;Node.js&lt;/code&gt; 实际上是 ECMAScript 的一个超集。  &lt;/p&gt;
&lt;p&gt;本文包含 es6+ 新增特性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.ii6g.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://blog.ii6g.com/tags/javascript/"/>
    
      <category term="es6" scheme="http://blog.ii6g.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.ii6g.com/blog/hello-world.html"/>
    <id>http://blog.ii6g.com/blog/hello-world.html</id>
    <published>2020-05-09T13:21:54.805Z</published>
    <updated>2020-05-09T15:16:08.143Z</updated>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
